plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id "org.beryx.runtime" version "1.12.1"
}

apply plugin: 'org.openjfx.javafxplugin'
apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    jcenter()
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

javafx {
    version = "15"
    modules = [ 'javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.swing']
}

dependencies {
    //test dependencies
    testImplementation "junit:junit:${junit_version}"

    //shadowed dependencies
    compile "org.jfree:org.jfree.fxgraphics2d:${fxgraphics_version}"
    compile "com.itextpdf:itextpdf:${itext_version}"
    compile "org.imgscalr:imgscalr-lib:${imgscalr_version}"
    compile "com.google.code.gson:gson:${gson_version}"
    compile "org.locationtech.jts:jts-core:${jts_version}"
    compile "org.apache.xmlgraphics:batik-svggen:${xml_graphics_version}"
    compile "org.apache.xmlgraphics:batik-dom:${xml_graphics_version}"
    implementation 'com.jhlabs:filters:2.0.235-1'
    implementation 'org.joml:joml:1.10.1'
    //compile "org.controlsfx:controlsfx:${controlsfx_version}"

    //required for cross platform compatibility, src: https://stackoverflow.com/questions/61579722/making-a-cross-platform-build-of-javafx-using-gradle
    String javaFxVersion = '15'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-swing', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-swing', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-swing', version: javaFxVersion, classifier: 'linux'

    //// JOGL
    compile "org.jogamp.gluegen:gluegen-rt:2.3.1"
    compile "org.jogamp.jogl:jogl-all:2.3.1"

    runtime "org.jogamp.gluegen:gluegen-rt:2.3.1:natives-android-aarch64"
    runtime "org.jogamp.gluegen:gluegen-rt:2.3.1:natives-android-armv6"
    runtime "org.jogamp.gluegen:gluegen-rt:2.3.1:natives-linux-amd64"
    runtime "org.jogamp.gluegen:gluegen-rt:2.3.1:natives-linux-armv6"
    runtime "org.jogamp.gluegen:gluegen-rt:2.3.1:natives-linux-armv6hf"
    runtime "org.jogamp.gluegen:gluegen-rt:2.3.1:natives-linux-i586"
    runtime "org.jogamp.gluegen:gluegen-rt:2.3.1:natives-macosx-universal"
    runtime "org.jogamp.gluegen:gluegen-rt:2.3.1:natives-solaris-amd64"
    runtime "org.jogamp.gluegen:gluegen-rt:2.3.1:natives-solaris-i586"
    runtime "org.jogamp.gluegen:gluegen-rt:2.3.1:natives-windows-amd64"
    runtime "org.jogamp.gluegen:gluegen-rt:2.3.1:natives-windows-i586"

    runtime "org.jogamp.jogl:jogl-all:2.3.1:natives-android-aarch64"
    runtime "org.jogamp.jogl:jogl-all:2.3.1:natives-android-armv6"
    runtime "org.jogamp.jogl:jogl-all:2.3.1:natives-linux-amd64"
    runtime "org.jogamp.jogl:jogl-all:2.3.1:natives-linux-armv6"
    runtime "org.jogamp.jogl:jogl-all:2.3.1:natives-linux-armv6hf"
    runtime "org.jogamp.jogl:jogl-all:2.3.1:natives-linux-i586"
    runtime "org.jogamp.jogl:jogl-all:2.3.1:natives-macosx-universal"
    runtime "org.jogamp.jogl:jogl-all:2.3.1:natives-solaris-amd64"
    runtime "org.jogamp.jogl:jogl-all:2.3.1:natives-solaris-i586"
    runtime "org.jogamp.jogl:jogl-all:2.3.1:natives-windows-amd64"
    runtime "org.jogamp.jogl:jogl-all:2.3.1:natives-windows-i586"
}

targetCompatibility = "11"
sourceCompatibility = "11"

project.setArchivesBaseName(app_name + "-" + app_version + "-" + app_state)
project.setApplicationName(app_name)

application {
    mainClassName  = 'drawingbot.Launcher'
    applicationName = 'drawingbot'
    applicationDefaultJvmArgs = ["-Dprism.verbose=true", "-Dprism.maxvram=1G", "-Xmx16G", "-Dprism.maxTextureSize=0"]
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    modules = [
            'java.sql',
            'java.desktop',
            'java.scripting',
            'java.logging',
            'java.xml.crypto',
            'java.management',
            'java.xml',
            'jdk.jfr',
            'jdk.unsupported',
            'java.datatransfer'] //created via suggestModules

    jpackage{
        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        imageOptions += ['--icon', "src/main/resources/images/icon.$imgType"]
        appVersion = "$app_version"
        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'Ollie Lansdell']
        installerOutputDir = file("$buildDir/jpackage-installers")
        if(currentOs.windows) {
            installerOptions += ['--win-dir-chooser', '--win-menu', '--win-shortcut']
            //installerName = app_name + "-" + app_version + "-" + app_state bug in wix, doesn't allow this
            installerType = 'exe'
        }
        else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', "drawingbotv3",'--linux-shortcut']
            installerName = app_name + "-" + app_version + "-" + app_state + "-linux"
        }
        else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', "drawingbotv3"]
            installerName = app_name + "-" + app_version + "-" + app_state + "-mac"
        }
    }
}

task jpackageImageZip(type: Zip){
    getArchiveFileName().set("${app_name + "-" + app_version + "-" + app_state + "-win"}.zip")
    getDestinationDirectory().set(file("$buildDir/release"))

    from "$buildDir/jpackage/$app_name"
}
jpackageImageZip.dependsOn jpackageImage

task renameWindowsLauncher (type: Copy) { //temporary, due to bug in wix toolset
    from ("$buildDir/jpackage-installers")
    into ("$buildDir/release")
    def baseName = "$app_name" + "-" + "$app_version"
    include baseName + ".exe"
    rename baseName + ".exe", baseName + "-" + app_state + "-win" + ".exe"
}
renameWindowsLauncher.dependsOn jpackage

task moveShadowJar (type: Copy) {
    from ("$buildDir/libs")
    into ("$buildDir/release")

    include app_name + "-" + app_version + "-" + app_state + "-all.jar"
}
moveShadowJar.dependsOn shadowJar

task prepareRelease{
    //
}
prepareRelease.dependsOn jpackageImageZip
prepareRelease.dependsOn renameWindowsLauncher
prepareRelease.dependsOn moveShadowJar
